##########
# Screens
##########
<MySingleViewScreen@MyScreen>:
    name: 'SingleView'
    part_containers: [self]
    
<MyDoubleViewScreen@MyScreen>:             
    name: 'DoubleView'
    part_containers: [part1_container, part2_container]
    BoxLayout:
	    id: all
	    min_view_size: sp(30)
	    strip_size: sp(13)
	    orientation: 'vertical' if self.width < self.height else 'horizontal'
	    vertical: self.orientation == 'vertical'
	    bigger_size: self.height if self.vertical else self.width
	    default_part_size: (self.bigger_size - self.strip_size)/2
	
	    # Reset part sizes when orientation changes
	    on_vertical:
	        if args[1]: splitter1.height = self.default_part_size
	        if not args[1]: splitter1.width = self.default_part_size
	
		Splitter:
		    id: splitter1
		    strip_size: all.strip_size
		    max_size: all.bigger_size - (all.min_view_size + all.strip_size)*2
		    min_size: all.min_view_size + all.strip_size
		    sizable_from: 'bottom' if all.vertical else 'right'
		    size_hint: (1, None) if all.vertical else (None, 1)
		    size: (all.width, all.default_part_size) if all.vertical else (all.default_part_size, all.height)
		
		    BoxLayout:
		    	id: part1_container

		BoxLayout:
			id: part2_container

<MyTripleViewScreen@MyScreen>:             
    name: 'TripleView'
	part_containers: [part1_container, part2_container, part3_container]
    BoxLayout:
	    id: all
	    min_view_size: sp(30)
	    strip_size: sp(13)
	    orientation: 'vertical' if self.width < self.height else 'horizontal'
	    vertical: self.orientation == 'vertical'
	    bigger_size: self.height if self.vertical else self.width
	    default_part_size: (self.bigger_size - self.strip_size*2)/3
	
	    # Reset part sizes when orientation changes
	    on_vertical:
	        if args[1]: (splitter1.height, splitter2.height) = (self.default_part_size, self.default_part_size)
	        if not args[1]: (splitter1.width, splitter2.width) = (self.default_part_size, self.default_part_size)
	
		Splitter:
		    id: splitter1
		    strip_size: all.strip_size
		    max_size: all.bigger_size - (all.min_view_size + all.strip_size)*2
		    min_size: all.min_view_size + all.strip_size
		    sizable_from: 'bottom' if all.vertical else 'right'
		    size_hint: (1, None) if all.vertical else (None, 1)
		    size: (all.width, all.default_part_size) if all.vertical else (all.default_part_size, all.height)
		
		    BoxLayout:
		    	id: part1_container
		
		Splitter:
		    id: splitter2
		    strip_size: all.strip_size
		    splitter1_bigger_size: splitter1.height if all.vertical else splitter1.width
		    max_size: (all.bigger_size - self.splitter1_bigger_size) - (all.min_view_size + self.strip_size)
		    min_size: all.min_view_size + self.strip_size
		    sizable_from: 'bottom' if all.vertical else 'right'
		    size_hint: (1, None) if all.vertical else (None, 1)
		    size: (all.width, all.default_part_size) if all.vertical else (all.default_part_size, all.height)
		
		    BoxLayout: 
		    	id: part2_container   
		
		BoxLayout:
			id: part3_container

##########
# View chooser
##########
<ViewChooser@ToggleButtonMulti>:
	name: ''
	group: 'view choosers'
	allow_no_selection: False
    text: root.view_name
    on_state: app.top.screen_manager.update_screens(root.name, self.state)    	

    
##########
# List widgets
##########
<ListItemSingleLineTextInput>:
	multiline: False

<ListItemFloatInput>:
	id: value_display_widget
	multiline: False
	on_focus: self.parent.variable.user_is_editing = self.focus
	on_text_validate: self.parent.variable.user_entered_text(self.text)
	disabled: self.parent == None or (self.parent.variable.channel_out == None and self.parent.variable.channel_in != None)
